#name: Release workflow
#on:
# push:
#  branches:
#    - main
#  workflow_dispatch:
#
#jobs:
#  release-tag:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Create Github release
#        id: create-new-release
#        uses: actions/create-release@v1
#        env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#            tag_name: ${{ github.run_number }}
#            release_name: Release ${{ github.run_number }}
#      - name: Upload release asset
#        uses: actions/upload-release-asset@v1
#        env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create-new-release.outputs.upload_url }}
#          asset_path: ./site.zip
#          asset_name: site-v${{ github.run_number}}.zip
#          asset_content_type: application/zip


#name: Release workflow
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  release-on-push:
#    runs-on: ubuntu-latest
#    env:
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#    steps:
#      - uses: rymndhng/release-on-push-action@master
#        with:
#          bump_version_scheme: minor
#          use_github_release_notes: true

# https://docs.github.com/en/actions

name: "Release"

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
#    tags:
#      - "**"

jobs:
  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    steps:
      - name: "Determine tag"
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

      - name: "Create release"
        uses: "actions/github-script@v5"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
            } catch (error) {
              core.setFailed(error.message);
            }
